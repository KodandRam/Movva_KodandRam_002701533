/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.DoctorData;
import model.DoctorHistory;

/**
 *
 * @author movvakodandram
 */
public class EditDoctor extends javax.swing.JPanel {

    /**
     * Creates new form EditDoctor
     */
    DoctorHistory drHis;
    
    public EditDoctor(DoctorHistory drHis) {
        initComponents();
        this.drHis=drHis;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSpecial = new javax.swing.JTextField();
        submitVIewDr = new javax.swing.JButton();
        lblCommName1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        docTable = new javax.swing.JTable();
        lblCommZip1 = new javax.swing.JLabel();
        txtDrName1 = new javax.swing.JTextField();
        submitUpdateDr = new javax.swing.JButton();
        submitDeleteDr = new javax.swing.JButton();
        lblHname1 = new javax.swing.JLabel();
        txtHName1 = new javax.swing.JTextField();

        txtSpecial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSpecialActionPerformed(evt);
            }
        });

        submitVIewDr.setText("VIEW");
        submitVIewDr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitVIewDrActionPerformed(evt);
            }
        });

        lblCommName1.setText("Doctor Name");

        docTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Doctor Object", "Doctor Name", "Specialisation", "Hospital Name"
            }
        ));
        jScrollPane1.setViewportView(docTable);

        lblCommZip1.setText("Specialisation");

        txtDrName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDrName1ActionPerformed(evt);
            }
        });

        submitUpdateDr.setText("UPDATE");
        submitUpdateDr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitUpdateDrActionPerformed(evt);
            }
        });

        submitDeleteDr.setText("DELETE");
        submitDeleteDr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitDeleteDrActionPerformed(evt);
            }
        });

        lblHname1.setText("Hospital Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(submitVIewDr)
                                .addGap(18, 18, 18)
                                .addComponent(submitUpdateDr)
                                .addGap(18, 18, 18)
                                .addComponent(submitDeleteDr))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblCommZip1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblCommName1))
                                    .addComponent(lblHname1))
                                .addGap(54, 54, 54)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtDrName1, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                    .addComponent(txtSpecial)
                                    .addComponent(txtHName1, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCommName1)
                    .addComponent(txtDrName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCommZip1)
                    .addComponent(txtSpecial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHname1)
                    .addComponent(txtHName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitVIewDr)
                    .addComponent(submitDeleteDr)
                    .addComponent(submitUpdateDr))
                .addContainerGap(76, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSpecialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSpecialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSpecialActionPerformed

    private void txtDrName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDrName1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDrName1ActionPerformed

    private void submitDeleteDrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitDeleteDrActionPerformed
        // TODO add your handling code here:
          int selectedRowIndex=docTable.getSelectedRow();
            if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }
        
                DefaultTableModel model= (DefaultTableModel) docTable.getModel();
                DoctorData selectedPerson=(DoctorData) model.getValueAt(selectedRowIndex,0 );
                drHis.deleteData(selectedPerson);
                
                JOptionPane.showMessageDialog(this, "Doctor Data deleted");
                
                populateTable();


    }//GEN-LAST:event_submitDeleteDrActionPerformed

    private void submitVIewDrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitVIewDrActionPerformed
        // TODO add your handling code here:
               int selectedRowIndex=docTable.getSelectedRow();
               if(selectedRowIndex<0){
               JOptionPane.showMessageDialog(this, "Please select a row to view");
               return;
        }
        
                DefaultTableModel model= (DefaultTableModel) docTable.getModel();
                DoctorData selectedPerson=(DoctorData) model.getValueAt(selectedRowIndex,0 );
                txtDrName1.setText(String.valueOf(selectedPerson.getDrName()));
                txtSpecial.setText(String.valueOf(selectedPerson.getDrSpec()));
                txtHName1.setText(String.valueOf(selectedPerson.getHospitalName()));


    }//GEN-LAST:event_submitVIewDrActionPerformed

    private void submitUpdateDrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitUpdateDrActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex= docTable.getSelectedRow();
              if(selectedRowIndex<0){
                   JOptionPane.showMessageDialog(this, "Please select view/modify  for the row you want to update");
                      return;
                         }
              
               DefaultTableModel model= (DefaultTableModel) docTable.getModel();
               DoctorData dd=(DoctorData) model.getValueAt(selectedRowIndex, 0);
        
            for(DoctorData i: drHis.getDoctorhistory()){
              if(i.getDrName()==dd.getDrName()){
                  
            i.setDrName(txtDrName1.getText());
            i.setDrSpec(txtSpecial.getText());
            i.setHospitalName(txtHName1.getText());
        
            populateTable();

            }

            }


    }//GEN-LAST:event_submitUpdateDrActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable docTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCommName1;
    private javax.swing.JLabel lblCommZip1;
    private javax.swing.JLabel lblHname1;
    private javax.swing.JButton submitDeleteDr;
    private javax.swing.JButton submitUpdateDr;
    private javax.swing.JButton submitVIewDr;
    private javax.swing.JTextField txtDrName1;
    private javax.swing.JTextField txtHName1;
    private javax.swing.JTextField txtSpecial;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
         DefaultTableModel model= (DefaultTableModel) docTable.getModel();
        
        model.setRowCount(0);
        for (DoctorData dd : drHis.getDoctorhistory()){
            Object[] row= new Object[4];
            row[0]=dd;
            row[1]=dd.getDrName();
            row[2]=dd.getDrSpec();
            row[3]=dd.getHospitalName();
            
            
            model.addRow(row);
            
        }

        
    }
}
